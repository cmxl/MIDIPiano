@page "/movies"
@using dominikz.Components.Shelf
@using dominikz.Components.Slideshow

<div>
    @*FEATURED MOVIES*@
    <div>
        @*SHELF*@
        <div style="@CreateFeaturedContainerStyle()">
            <DZText Typo="@CSSTypo.H2" Color="@ThemeColor.Primary">Featured Movies</DZText>
            <div class="hideOnMobile">
                <DZShelf ItemHeight=229 ItemWidth=160>
                    @foreach (var movie in _featuredMovies)
                    {
                        <DZShelfItem OnClick=@(() => NavigateToReview(movie.Id)) BackgroundImage=@movie.Thumbnail>
                            <DZText Typo="@CSSTypo.H2">@movie.Title</DZText>
                            <hr />
                            <DZRating Score=2 Size=CSSSize.Normal />

                            <DZGrid>
                                @foreach (var category in movie.Categories)
                                {
                                    <DZChip Size=CSSSize.Small>@category</DZChip>
                                }
                            </DZGrid>

                            <DZButton OnClick=@(() => NavigateToReview(movie.Id)) Text="Show Review" />
                        </DZShelfItem>
                    }
                </DZShelf>
            </div>
        </div>

        @*SLIDESHOW*@
        <div class="hideOnDesktop">
            <DZSlideshow>
                @foreach (var movie in _featuredMovies)
                {
                    <DZSlideshowItem OnClick=@(() => NavigateToReview(movie.Id)) Image=@movie.Thumbnail>
                        <DZText Typo="@CSSTypo.H2">@movie.Title</DZText>
                        <hr />
                        <DZRating Score=2 Size=CSSSize.Normal />

                        <DZGrid>
                            @foreach (var category in movie.Categories)
                            {
                                <DZChip Size=CSSSize.Small>@category</DZChip>
                            }
                        </DZGrid>

                        <DZButton OnClick=@(() => NavigateToReview(movie.Id)) Text="Show Review" />
                    </DZSlideshowItem>
                }
            </DZSlideshow>
        </div>
    </div>

    <DZSpacer Spacing=15 />

    @*ALL MOVIES*@
    <div>
        <DZText Typo="@CSSTypo.H2" Color="@ThemeColor.Primary">Movies</DZText>

        <DZGrid Spacing=5 ItemAlgin=CSSAlignment.Center>
            <DZGridItem>
                <DZSearchbox @ref=_serachbox Width=350 OnInput=Searching />
            </DZGridItem>
            <DZSortField>
                <DZSortButton @ref=_standardSort OnDirectionChanged=@SortByRelease Icon="fas fa-calendar" />
                <DZSortButton OnDirectionChanged=@SortByTitle Icon="fas fa-heading" />
                <DZSortButton OnDirectionChanged=@SortByRating Icon="fas fa-star-half-alt" />
            </DZSortField>
        </DZGrid>

        <DZSpacer Spacing=15 Style=SpacingStyle.TopAndBottom />

        <DZGrid Spacing=5>
            @foreach (var movie in _table)
            {
                <DZGridItem>
                    <DZCard Width=150 OnClick=@(() => NavigateToReview(movie.Id))>
                        <DZCardImageHeader Height=214 ImageUrl=@movie.Thumbnail />
                        <DZCardContent>
                            <DZGrid Direction=CSSDirection.Column TextAlgin=CSSAlignment.Center ItemAlgin=CSSAlignment.Center>
                                <DZRating Score=@movie.Score Size=CSSSize.Large />
                                <DZText Color=ThemeColor.Primary Weight=CSSFontWeight.Bold>@movie.Title</DZText>
                            </DZGrid>
                        </DZCardContent>
                    </DZCard>
                </DZGridItem>
            }
        </DZGrid>
    </div>
</div>

@code {

    [Inject]
    public DataContext DataContext { get; set; }

    [Inject]
    public NavigationManager NavManager { get; set; }

    [Inject]
    public CSSBuilder _cssBuilder { get; set; }

    private DZSearchbox _serachbox;
    private DZSortButton _standardSort;

    private List<VMMoviePreview> _featuredMovies { get; set; } = new();
    private List<VMMoviePreview> _movies { get; set; } = new();
    private List<VMMoviePreview> _table { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _featuredMovies = await DataContext.From(new GetByInt<List<VMMoviePreview>>(Endpoints.Movies.GetFeatured, 5), default);
        _movies = await DataContext.From(new GetByInt<List<VMMoviePreview>>(Endpoints.Movies.GetLatest, 5), default);
        _table = _movies.ToList();
        await _standardSort.SetDirection(SortDirection.Ascending);
    }

    private void Searching(ChangeEventArgs args)
    {
        var search = args.Value.ToString();

        // empty
        if (string.IsNullOrWhiteSpace(search))
        {
            _table = _movies.ToList();
            _serachbox.Icon = "fas fa-search";
            return;
        }

        // by title
        _table = _movies.Where(x => x.Title.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
        if (_table.Any())
        {
            _serachbox.Icon = "fas fa-heading";
            return;
        }

        // by category
        _table = _movies.Where(x => x.Categories.Any(y => y.Contains(search, StringComparison.OrdinalIgnoreCase))).ToList();
        if (_table.Any())
        {
            _serachbox.Icon = "fas fa-tags";
            return;
        }

        // set default
        _serachbox.Icon = "fas fa-search";
    }

    private void SortByRelease(SortDirection direction)
        => _table = direction switch
        {
            SortDirection.Ascending => _table.OrderBy(x => x.Release).ToList(),
            SortDirection.Descending => _table.OrderByDescending(x => x.Release).ToList(),
            SortDirection.None or _ => _table
        };

    private void SortByTitle(SortDirection direction)
        => _table = direction switch
        {
            SortDirection.Ascending => _table.OrderBy(x => x.Title).ToList(),
            SortDirection.Descending => _table.OrderByDescending(x => x.Title).ToList(),
            SortDirection.None or _ => _table
        };

    private void SortByRating(SortDirection direction)
        => _table = direction switch
        {
            SortDirection.Ascending => _table.OrderBy(x => x.Score).ToList(),
            SortDirection.Descending => _table.OrderByDescending(x => x.Score).ToList(),
            SortDirection.None or _ => _table
        };

    private string CreateFeaturedContainerStyle()
        => _cssBuilder.Create()
        .SetFlex(new FlexBox()
            {
                Direction = CSSDirection.Column,
                ItemAlignment = CSSAlignment.Center
            })
        .Build();

    private void NavigateToReview(int movieId)
        => NavManager.NavigateTo($"/movies/{movieId}");
}