@switch (this.Typo)
{
    case CSSTypo.H1:
        <span style="@CreateTextStyle(2)"><b>@ChildContent</b></span>
        break;
    case CSSTypo.H2:
        <span style="@CreateTextStyle(1.5)"><b>@ChildContent</b></span>
        break;
    case CSSTypo.H3:
        <span style="@CreateTextStyle(1)"><b>@ChildContent</b></span>
        break;
    case CSSTypo.H4:
        <span style="@CreateTextStyle(1)">@ChildContent</span>
        break;
    case CSSTypo.H5:
        <span style="@CreateTextStyle(1)">@ChildContent</span>
        break;
    case CSSTypo.H6:
        <span style="@CreateTextStyle(1)">@ChildContent</span>
        break;
    case CSSTypo.Body:
        <span style="@CreateTextStyle(1)">@ChildContent</span>
        break;
    case CSSTypo.Subtitle:
        <i style="@CreateTextStyle(1)">@ChildContent</i>
        break;
}

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public CSSTypo Typo { get; set; } = CSSTypo.Body;

    [Parameter]
    public ThemeColor Color { get; set; } = ThemeColor.Secondary;

    [Parameter]
    public string CustomColor { get; set; }

    [Parameter]
    public CSSFontWeight Weight { get; set; } = CSSFontWeight.Normal;

    [Inject]
    private CSSBuilder _cssBuilder { get; set; }

    private string CreateTextStyle(double fontsize)
    {
        var config = _cssBuilder.Create()
            .SetFontSize(fontsize)
            .SetFontWeight(Weight);


        if (!string.IsNullOrWhiteSpace(CustomColor))
            return config.SetColor(CustomColor).Build();

        return _cssBuilder.SetColor(Color).Build();
    }
}
