@Create()

@code {

    [Inject]
    private CSSBuilder _cssBuilder { get; set; }

    [Inject]
    private CSSTheme _theme { get; set; }

    private MarkupString Create()
    {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("<style>");
        sb.AppendLine($":root {{ {CreateRootStyle()} }}");
        sb.AppendLine($"body {{ {CreateBodyStyle()} }}");
        sb.AppendLine("</style>");

        return new MarkupString(sb.ToString());
    }

    private string CreateBodyStyle()
        => _cssBuilder.Create()
            .SetBackground(ThemeColor.Background)
            .SetColor(ThemeColor.Secondary)
            .SetFontFamily("Roboto") //'Roboto','Helvetica','Arial','sans-serif'
            .SetMargin(new Spacing(0))
            .Build();

    private string CreateRootStyle()
    {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine($"--color-primary: {_theme.GetHex(ThemeColor.Primary, CSSOpacity.P100)};");
        sb.AppendLine($"--color-secondary: {_theme.GetHex(ThemeColor.Secondary, CSSOpacity.P100)};");
        sb.AppendLine($"--color-menu: {_theme.GetHex(ThemeColor.Menu, CSSOpacity.P100)};");
        sb.AppendLine($"--color-background: {_theme.GetHex(ThemeColor.Background, CSSOpacity.P100)};");
        sb.AppendLine($"--color-surface: {_theme.GetHex(ThemeColor.Surface, CSSOpacity.P100)};");
        return sb.ToString();
    }
}